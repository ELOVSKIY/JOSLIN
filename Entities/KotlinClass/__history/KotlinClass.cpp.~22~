// ---------------------------------------------------------------------------

#pragma hdrstop

#include "KotlinClass.h"

#include "KotlinClass.h"
#include "ArrayValue.h"

string KotlinClass::getFileContext() {
	string context;
	context.append("@Entity(tableName = \"");
	context.append(tableName + "\")\n");
	context.append("data class ");
	context.append(className + "(");

	list<Value*>::iterator iter;
	for (iter = classFields->begin(); iter != classFields->end(); iter++) {
        Value* v = *iter;
	}
//	for (auto v : *classFields) {
//		if (isDatabaseAnnotated) {
//			context.append("\n   @ColumnInfo(name = \"");
//			context.append(v->getTableName() + "\")\n");
//		}
//		if (isResponseAnnotated) {
//			context.append("   @SerializedName(\"");
//			context.append(v->getSerializeName() + "\")\n");
//		}
//		context.append("   val ");
//		context.append(v->getName());
//		context.append(": ");
//		context.append(v->getTypeName());
//		context.append(",");
//	}
	context[context.length() - 1] = '\n';
	context.append(")");
	if (hasPrimaryKey) {
		context.append
			("{\n" "    @PrimaryKey(autoGenerate = false)\n"
			"    var id: Int = 0\n" "}");
	}
	return context;
}

KotlinClass::KotlinClass(Object *object) {
	isDatabaseAnnotated = false;
	isResponseAnnotated = false;
	hasPrimaryKey = false;
	this->fileName = object->getClassName() + ".kt";
	this->className = object->getClassName();
	this->tableName = object->getName();
	classFields = new list<Value*>;

	set<Value*> l = object->getObjectFields();
	set<Value*>::iterator iter;
	for (iter = l.begin(); iter != l.end(); iter++) {
		Value* v = *iter;
        classFields->push_front(v);
    }
//	for (auto v : object->getObjectFields()) {
//		classFields->push_front(v);
//	}
}

void KotlinClass::setIsDatabaseAnnotated(bool isDatabaseAnnotated) {
	this->isDatabaseAnnotated = isDatabaseAnnotated;
}

void KotlinClass::setIsResponseAnnotated(bool isResponseAnnotated) {
	this->isResponseAnnotated = isResponseAnnotated;
}

string KotlinClass::getFileName() {
	return fileName;
}
// ---------------------------------------------------------------------------
#pragma package(smart_init)
